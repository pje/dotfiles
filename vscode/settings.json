{
  "[c/c++]": {
    "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd",
    "editor.formatOnPaste": false,
    "editor.formatOnSave": false
  },
  "[csharp]": {
    "editor.tabSize": 4
  },
  "[go]": {
    "editor.defaultFormatter": "golang.go",
    "editor.formatOnSave": true,
    "editor.tabSize": 8
  },
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features",
    "editor.formatOnSave": true
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features",
    "editor.formatOnSave": true
  },
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features",
    "editor.formatOnSave": true
  },
  "[markdown]": {
    "files.trimTrailingWhitespace": false
  },
  "[python]": {
    "editor.tabSize": 4
  },
  "[ruby]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnPaste": false,
    "editor.formatOnSave": false // ruby-prettier isn't yet stable enough to be anything but opt-in
  },
  "[typescript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features",
    "editor.formatOnSave": true
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "breadcrumbs.enabled": false,
  "clangd.onConfigChanged": "restart",
  "clangd.path": "~/Library/Application Support/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/10.0.0/clangd_10.0.0/bin/clangd",
  "custom-ui-style.electron": {
    "titleBarStyle": "hiddenInset"
  },
  "custom-ui-style.stylesheet": {
    ".monaco-workbench": {
      "--activitybar-width": "78px",
      "--titlebar-height": "37px",
      // Titlebar
      ".part.sidebar.left .composite.title": {
        "&, .title-actions, .global-actions, .monaco-toolbar": {
          "height": "var(--titlebar-height)"
        },
        ".title-label": {
          "line-height": "var(--titlebar-height)"
        }
      },
      // Tabs
      ".title.tabs": {
        "--editor-group-tab-height": "var(--titlebar-height) !important",
      },
      // Wide activity bar
      ".split-view-view:has(> .part.activitybar.left)": {
        "&, .part.activitybar.left, .content": {
          "min-width": "var(--activitybar-width)",
        },
        // Make the split-view after the wide activity bar smaller.
        // Also handle the situation where the sidebar is hidden,
        // in which case the editor itself needs to shrink / auto-size.
        "& + .split-view-view.visible, & + .split-view-view:not(.visible) + .split-view-view.visible": {
          "--offset": "calc(var(--activitybar-width) - 48px)",
          "margin-left": "var(--offset)",
          "> *:first-child": {
            "width": "auto",
            "margin-right": "var(--offset)",
            // Auto-size the editor when the sidebar is hidden.
            ".content": {
              "&, .split-view-view": {
                "&, .monaco-editor": {
                  "&, .overflow-guard, .overlayWidgets": {
                    "&, .monaco-scrollable-element, .sticky-widget": {
                      "width": "unset !important",
                      "left": "0",
                      "right": "0"
                    },
                    ".sticky-widget": {
                      "right": "14px !important"
                    }
                  }
                }
              }
            }
          },
        }
      },
      ".monaco-sash.vertical.minimum": {
        // TODO: Improve collapsing of the sidebar.
        "left": "calc(var(--activitybar-width) - var(--vscode-sash-size) / 2) !important"
      },
      ".part.activitybar.left": {
        ".monaco-action-bar": {
          ".action-label": {
            "width": "var(--activitybar-width)"
          }
        }
      },
      "&:not(.fullscreen)": {
        // Make room for traffic lights.
        ".part.activitybar.left > .content": {
          "padding-top": "var(--titlebar-height)"
        },
        // Move editor title when side-bar is hidden, when side-bar is on the
        // right or when activity-bar is hidden and side-bar is not on the right
        "&:has(.sidebar.right)": {
          ".monaco-split-view2.horizontal .split-view-view:not(.visible) + .split-view-view.visible .editor .title .tabs-and-actions-container": {
            "padding-left": "var(--activitybar-width)"
          },
          ".auxiliarybar.left .composite.title": {
            "padding-left": "var(--activitybar-width)"
          }
        },
        // Allow dragging on the activity-bar, status-bar, tabs-container, side-bar title...
        ".activitybar, .statusbar, .tabs-container, .sidebar .composite.title": {
          "-webkit-app-region": "drag",
          // ...but still allow to click actions and items without dragging.
          ".content .monaco-action-bar, .statusbar-item, .tab, .title .title-actions .action-label": {
            "-webkit-app-region": "no-drag"
          }
        }
      },
      ".statusbar": {
        // Don't indent the statusbar items.
        "> .items-container > .statusbar-item.left.first-visible-item": {
          "padding-left": "0"
        },
        // Show the host button again, and make it as wide as the .activitybar.
        "#status\\.host": {
          "&": {
            "display": "block !important",
            "width": "calc(var(--activitybar-width) - 1px)"
          },
          ".codicon": {
            "margin": "0 auto"
          }
        }
      }
    },
    // Make line numbers a bit smaller.
    ".editor .margin-view-overlays .line-numbers": {
      "font-size": "85%"
    },
    // Show search inputs and results in monospaced font.
    ".search-widget textarea, .find-widget textarea, .search-view .results .match": {
      "font-family": "var(--cus-monospace-font) !important"
    }
  },
  "dotnet.completion.showCompletionItemsFromUnimportedNamespaces": true,
  "dotnet.codeLens.enableReferencesCodeLens": false,
  "dotnet.server.useOmnisharp": true,
  "editor.cursorStyle": "line-thin",
  "editor.cursorWidth": 0,
  "editor.fontFamily": "Consolas",
  "editor.fontSize": 13,
  "editor.formatOnPaste": false,
  "editor.hideCursorInOverviewRuler": true,
  "editor.inlineSuggest.enabled": true,
  "editor.minimap.enabled": false,
  "editor.mouseWheelScrollSensitivity": 1.5,
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.rulers": [
    {
      "color": "#ebdbb2",
      "column": 80
    }
  ],
  "editor.scrollBeyondLastLine": false,
  "editor.suggestSelection": "first",
  "editor.tabSize": 2,
  "explorer.autoReveal": false,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "explorer.sortOrder": "filesFirst",
  "files.associations": {
    "*.ino": "cpp",
    "*.rake": "ruby",
    "*.rbi": "ruby",
    "*.rbs": "ruby",
    "Brewfile": "ruby",
    "Capfile": "ruby",
    "Gemfile": "ruby"
  },
  "files.trimTrailingWhitespace": true,
  "github.copilot.editor.enableAutoCompletions": false,
  "gitlens.codeLens.scopes": [
    "document" // At the top of the file
    // "containers" // At the start of modules, classes, interfaces, etc
    // "blocks" // At the start of functions, methods, etc
  ],
  "go.coverOnSingleTest": true,
  "go.coverOnSingleTestFile": true,
  "go.coverOnTestPackage": true,
  "go.testTimeout": "20s",
  "go.toolsManagement.autoUpdate": true,
  "go.useLanguageServer": true,
  "gopls": {
    "build.env": {
      "GOPRIVATE": "github.com/github" // gets rid of irrelevant "X on pkg.go.dev" link on hover for our internal code
    }
    // "formatting.gofumpt": true
  },
  "Lua.telemetry.enable": false,
  "Lua.completion.enable": false,
  "merge-conflict.codeLens.enabled": false,
  "merge-conflict.decorators.enabled": false,
  "redhat.telemetry.enabled": false,
  "remote.autoForwardPortsSource": "hybrid",
  "security.workspace.trust.untrustedFiles": "open",
  "terminal.integrated.tabs.enabled": true,
  "terminal.integrated.enableMultiLinePasteWarning": "never",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "update.mode": "manual",
  "window.autoDetectColorScheme": true,
  "window.commandCenter": false,
  "window.customTitleBarVisibility": "never",
  "window.nativeFullScreen": false,
  "window.nativeTabs": false,
  "window.titleBarStyle": "native", // need to set 'native' here for some reason, it's overriden by custom-ui-style extension
  "window.zoomLevel": 1,
  "workbench.activityBar.location": "hidden",
  "workbench.colorTheme": "Gruvbox Light Medium",
  "workbench.editor.empty.hint": "hidden",
  "workbench.editor.enablePreview": false,
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "workbench.editor.showTabs": "multiple",
  "workbench.iconTheme": null,
  "workbench.layoutControl.enabled": false,
  "workbench.preferredLightColorTheme": "Gruvbox Light Medium",
  "workbench.preferredDarkColorTheme": "Gruvbox Dark Medium",
  "workbench.settings.editor": "json",
  "workbench.sideBar.location": "right",
  "workbench.startupEditor": "newUntitledFile",
  "workbench.statusBar.visible": false,
}
